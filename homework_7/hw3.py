# Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка. В его конструкторе
# инициализировать параметр, соответствующий количеству клеток (целое число). В классе должны быть реализованы
# методы перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()), умножение (__mul__()),
# деление (__truediv__()).Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение,
# умножение и обычное (не целочисленное) деление клеток, соответственно. В методе деления должно осуществляться
# округление значения до целого числа.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух
# клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток
# больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества
# ячеек этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление
# количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному
# аргументу. Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order()
# вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернет
# строку: *****\n*****\n*****.
# Подсказка: подробный список операторов для перегрузки доступен по ссылке.


class Cell:
    def __init__(self, cell):
        self.cell = int(cell)

    def __str__(self):
        return self.cell * "*"

    def __add__(self, other):
        return Cell(self.cell + other.cell)

    def __sub__(self, other):
        if (self.cell - other.cell) >= 0:
            return Cell(int(self.cell - other.cell))
        elif (other.cell - self.cell) > 0:
            return Cell(int(other.cell - self.cell))

    def __mul__(self, other):
        return Cell(int(self.cell * other.cell))

    def __truediv__(self, other):
        return Cell(round(self.cell // other.cell))

    def make_order(self, raw):
        row = ''
        for i in range(int(self.cell / raw)):
            row += f'{"*" * raw}\n'
        row += f'{"*" * (self.cell % raw)}'
        return row


cells1 = Cell(16)
cells2 = Cell(8)
print(cells1)
print(cells1 + cells2)
print(cells2 - cells1)
print(cells1 - cells2)
print(cells1 * cells2)
print(cells1 / cells2)

print("---------------")
print(cells2.make_order(4))
print(cells1.make_order(4))

